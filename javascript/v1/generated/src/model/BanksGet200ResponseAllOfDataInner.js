/**
 * Resources
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BanksGet200ResponseAllOfDataInnerBranchesInner from './BanksGet200ResponseAllOfDataInnerBranchesInner';

/**
 * The BanksGet200ResponseAllOfDataInner model module.
 * @module model/BanksGet200ResponseAllOfDataInner
 * @version 1
 */
class BanksGet200ResponseAllOfDataInner {
    /**
     * Constructs a new <code>BanksGet200ResponseAllOfDataInner</code>.
     * @alias module:model/BanksGet200ResponseAllOfDataInner
     */
    constructor() { 
        
        BanksGet200ResponseAllOfDataInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BanksGet200ResponseAllOfDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BanksGet200ResponseAllOfDataInner} obj Optional instance to populate.
     * @return {module:model/BanksGet200ResponseAllOfDataInner} The populated <code>BanksGet200ResponseAllOfDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BanksGet200ResponseAllOfDataInner();

            if (data.hasOwnProperty('branches')) {
                obj['branches'] = ApiClient.convertToType(data['branches'], [BanksGet200ResponseAllOfDataInnerBranchesInner]);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BanksGet200ResponseAllOfDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BanksGet200ResponseAllOfDataInner</code>.
     */
    static validateJSON(data) {
        if (data['branches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['branches'])) {
                throw new Error("Expected the field `branches` to be an array in the JSON data but got " + data['branches']);
            }
            // validate the optional field `branches` (array)
            for (const item of data['branches']) {
                BanksGet200ResponseAllOfDataInnerBranchesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * If the bank operates across multiple branches within a country, this property will be included, listing all the branches available from the bank.
 * @member {Array.<module:model/BanksGet200ResponseAllOfDataInnerBranchesInner>} branches
 */
BanksGet200ResponseAllOfDataInner.prototype['branches'] = undefined;

/**
 * The ISO 3166 alpha-2 country code in which the bank operates.
 * @member {String} country
 */
BanksGet200ResponseAllOfDataInner.prototype['country'] = undefined;

/**
 * @member {String} id
 */
BanksGet200ResponseAllOfDataInner.prototype['id'] = undefined;

/**
 * @member {String} name
 */
BanksGet200ResponseAllOfDataInner.prototype['name'] = undefined;






export default BanksGet200ResponseAllOfDataInner;

