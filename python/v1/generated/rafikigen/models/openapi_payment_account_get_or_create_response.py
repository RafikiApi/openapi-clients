# coding: utf-8

"""
    Resources

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from rafikigen.models.openapi_payment_account_get_or_create_response_bank_account import OpenapiPaymentAccountGetOrCreateResponseBankAccount
from rafikigen.models.openapi_payment_account_get_or_create_response_holder import OpenapiPaymentAccountGetOrCreateResponseHolder
from rafikigen.models.openapi_payment_account_get_or_create_response_mobile_money import OpenapiPaymentAccountGetOrCreateResponseMobileMoney

class OpenapiPaymentAccountGetOrCreateResponse(BaseModel):
    """
    OpenapiPaymentAccountGetOrCreateResponse
    """
    bank_account: Optional[OpenapiPaymentAccountGetOrCreateResponseBankAccount] = None
    country: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    holder: Optional[OpenapiPaymentAccountGetOrCreateResponseHolder] = None
    id: Optional[StrictStr] = Field(None, description="The newly created payment account unique identifier")
    mobile_money: Optional[OpenapiPaymentAccountGetOrCreateResponseMobileMoney] = None
    type: Optional[StrictStr] = 'MOBILE_MONEY'
    __properties = ["bank_account", "country", "created_at", "holder", "id", "mobile_money", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenapiPaymentAccountGetOrCreateResponse:
        """Create an instance of OpenapiPaymentAccountGetOrCreateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bank_account
        if self.bank_account:
            _dict['bank_account'] = self.bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holder
        if self.holder:
            _dict['holder'] = self.holder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_money
        if self.mobile_money:
            _dict['mobile_money'] = self.mobile_money.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenapiPaymentAccountGetOrCreateResponse:
        """Create an instance of OpenapiPaymentAccountGetOrCreateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenapiPaymentAccountGetOrCreateResponse.parse_obj(obj)

        _obj = OpenapiPaymentAccountGetOrCreateResponse.parse_obj({
            "bank_account": OpenapiPaymentAccountGetOrCreateResponseBankAccount.from_dict(obj.get("bank_account")) if obj.get("bank_account") is not None else None,
            "country": obj.get("country"),
            "created_at": obj.get("created_at"),
            "holder": OpenapiPaymentAccountGetOrCreateResponseHolder.from_dict(obj.get("holder")) if obj.get("holder") is not None else None,
            "id": obj.get("id"),
            "mobile_money": OpenapiPaymentAccountGetOrCreateResponseMobileMoney.from_dict(obj.get("mobile_money")) if obj.get("mobile_money") is not None else None,
            "type": obj.get("type") if obj.get("type") is not None else 'MOBILE_MONEY'
        })
        return _obj


