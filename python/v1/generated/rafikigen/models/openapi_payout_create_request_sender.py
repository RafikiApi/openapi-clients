# coding: utf-8

"""
    Resources

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from rafikigen.models.openapi_payout_create_request_sender_address import OpenapiPayoutCreateRequestSenderAddress
from rafikigen.models.openapi_payout_create_request_sender_individual import OpenapiPayoutCreateRequestSenderIndividual

class OpenapiPayoutCreateRequestSender(BaseModel):
    """
    An optional property for incorporating sender details. Please refer to the \"ðŸ’¡ **Compliance requirements**\" documentation above.  # noqa: E501
    """
    address: Optional[OpenapiPayoutCreateRequestSenderAddress] = None
    individual: Optional[OpenapiPayoutCreateRequestSenderIndividual] = None
    name: Optional[StrictStr] = Field(None, description="<span style=\"color:#e95f6a;\">required if sender is provided</span>  The individual full name or registered business legal name")
    type: Optional[StrictStr] = Field(None, description="<span style=\"color:#e95f6a;\">required if sender is provided</span>  Either `INDIVIDUAL` or `BUSINESS`")
    __properties = ["address", "individual", "name", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('INDIVIDUAL', 'BUSINESS'):
            raise ValueError("must be one of enum values ('INDIVIDUAL', 'BUSINESS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenapiPayoutCreateRequestSender:
        """Create an instance of OpenapiPayoutCreateRequestSender from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of individual
        if self.individual:
            _dict['individual'] = self.individual.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenapiPayoutCreateRequestSender:
        """Create an instance of OpenapiPayoutCreateRequestSender from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenapiPayoutCreateRequestSender.parse_obj(obj)

        _obj = OpenapiPayoutCreateRequestSender.parse_obj({
            "address": OpenapiPayoutCreateRequestSenderAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "individual": OpenapiPayoutCreateRequestSenderIndividual.from_dict(obj.get("individual")) if obj.get("individual") is not None else None,
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj


