# coding: utf-8

"""
    Resources

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class OpenapiPayoutCreateResponseState(BaseModel):
    """
    OpenapiPayoutCreateResponseState
    """
    code: Optional[StrictStr] = Field(None, description="The state code signifies the overall status of a payout. For detailed information about the meaning of each state, please consult the lifecycle section above.")
    context: Optional[StrictStr] = Field(None, description="Together with the \"code\" property, the \"context\" property offers additional context and information, whenever possible, about the specific state. For instance, if a payout fails, there are numerous reasons why this might occur. The \"context\" property will provide more detailed information in such cases.")
    __properties = ["code", "context"]

    @validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDING', 'REVERSED', 'SENT', 'CANCELLED', 'FAILED'):
            raise ValueError("must be one of enum values ('PENDING', 'REVERSED', 'SENT', 'CANCELLED', 'FAILED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenapiPayoutCreateResponseState:
        """Create an instance of OpenapiPayoutCreateResponseState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenapiPayoutCreateResponseState:
        """Create an instance of OpenapiPayoutCreateResponseState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenapiPayoutCreateResponseState.parse_obj(obj)

        _obj = OpenapiPayoutCreateResponseState.parse_obj({
            "code": obj.get("code"),
            "context": obj.get("context")
        })
        return _obj


