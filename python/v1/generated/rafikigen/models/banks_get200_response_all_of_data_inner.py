# coding: utf-8

"""
    Resources

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from rafikigen.models.banks_get200_response_all_of_data_inner_branches_inner import BanksGet200ResponseAllOfDataInnerBranchesInner

class BanksGet200ResponseAllOfDataInner(BaseModel):
    """
    BanksGet200ResponseAllOfDataInner
    """
    branches: Optional[conlist(BanksGet200ResponseAllOfDataInnerBranchesInner)] = Field(None, description="If the bank operates across multiple branches within a country, this property will be included, listing all the branches available from the bank.")
    country: Optional[StrictStr] = Field(None, description="The ISO 3166 alpha-2 country code in which the bank operates.")
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    __properties = ["branches", "country", "id", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BanksGet200ResponseAllOfDataInner:
        """Create an instance of BanksGet200ResponseAllOfDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in branches (list)
        _items = []
        if self.branches:
            for _item in self.branches:
                if _item:
                    _items.append(_item.to_dict())
            _dict['branches'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BanksGet200ResponseAllOfDataInner:
        """Create an instance of BanksGet200ResponseAllOfDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BanksGet200ResponseAllOfDataInner.parse_obj(obj)

        _obj = BanksGet200ResponseAllOfDataInner.parse_obj({
            "branches": [BanksGet200ResponseAllOfDataInnerBranchesInner.from_dict(_item) for _item in obj.get("branches")] if obj.get("branches") is not None else None,
            "country": obj.get("country"),
            "id": obj.get("id"),
            "name": obj.get("name")
        })
        return _obj


