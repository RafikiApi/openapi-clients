# coding: utf-8

"""
    Resources

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class OpenapiResponseBodyValidationFailedErrors(BaseModel):
    """
    OpenapiResponseBodyValidationFailedErrors
    """
    fields: Optional[Dict[str, conlist(StrictStr)]] = Field(None, description="Every key corresponds to the name of a property that has not passed validation. The value associated with each key is an array of strings that serves to provide a descriptive explanation of the requirements for that particular property and the reasons for its failure.")
    __properties = ["fields"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenapiResponseBodyValidationFailedErrors:
        """Create an instance of OpenapiResponseBodyValidationFailedErrors from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in fields (dict of array)
        _field_dict_of_array = {}
        if self.fields:
            for _key in self.fields:
                if self.fields[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.fields[_key]
                    ]
            _dict['fields'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenapiResponseBodyValidationFailedErrors:
        """Create an instance of OpenapiResponseBodyValidationFailedErrors from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenapiResponseBodyValidationFailedErrors.parse_obj(obj)

        _obj = OpenapiResponseBodyValidationFailedErrors.parse_obj({
            "fields": obj.get("fields")
        })
        return _obj


