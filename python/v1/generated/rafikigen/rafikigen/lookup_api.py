# coding: utf-8

"""
    Resources

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from rafikigen.models.lookups_account_number_get200_response import LookupsAccountNumberGet200Response

from rafikigen.api_client import ApiClient
from rafikigen.api_response import ApiResponse
from rafikigen.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class LookupApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def lookups_account_number_get(self, payment_account_type : Annotated[StrictStr, Field(..., description="The payment account type to lookup for")], account_number : Annotated[StrictStr, Field(..., description="The account number, that is either the mobile money number or bank account number")], bank_id : Annotated[Optional[StrictStr], Field(description="If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to")] = None, operator : Annotated[Optional[StrictStr], Field(description="If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator")] = None, **kwargs) -> LookupsAccountNumberGet200Response:  # noqa: E501
        """Get  # noqa: E501

        The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the `LOOKUP_ACCOUNT_NOT_FOUND` error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:--------------|:------------:|:------------:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lookups_account_number_get(payment_account_type, account_number, bank_id, operator, async_req=True)
        >>> result = thread.get()

        :param payment_account_type: The payment account type to lookup for (required)
        :type payment_account_type: str
        :param account_number: The account number, that is either the mobile money number or bank account number (required)
        :type account_number: str
        :param bank_id: If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to
        :type bank_id: str
        :param operator: If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator
        :type operator: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LookupsAccountNumberGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the lookups_account_number_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.lookups_account_number_get_with_http_info(payment_account_type, account_number, bank_id, operator, **kwargs)  # noqa: E501

    @validate_arguments
    def lookups_account_number_get_with_http_info(self, payment_account_type : Annotated[StrictStr, Field(..., description="The payment account type to lookup for")], account_number : Annotated[StrictStr, Field(..., description="The account number, that is either the mobile money number or bank account number")], bank_id : Annotated[Optional[StrictStr], Field(description="If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to")] = None, operator : Annotated[Optional[StrictStr], Field(description="If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get  # noqa: E501

        The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the `LOOKUP_ACCOUNT_NOT_FOUND` error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:--------------|:------------:|:------------:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      |   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lookups_account_number_get_with_http_info(payment_account_type, account_number, bank_id, operator, async_req=True)
        >>> result = thread.get()

        :param payment_account_type: The payment account type to lookup for (required)
        :type payment_account_type: str
        :param account_number: The account number, that is either the mobile money number or bank account number (required)
        :type account_number: str
        :param bank_id: If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to
        :type bank_id: str
        :param operator: If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator
        :type operator: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LookupsAccountNumberGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'payment_account_type',
            'account_number',
            'bank_id',
            'operator'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lookups_account_number_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['account_number']:
            _path_params['accountNumber'] = _params['account_number']


        # process the query parameters
        _query_params = []
        if _params.get('payment_account_type') is not None:  # noqa: E501
            _query_params.append(('payment_account_type', _params['payment_account_type']))

        if _params.get('bank_id') is not None:  # noqa: E501
            _query_params.append(('bank_id', _params['bank_id']))

        if _params.get('operator') is not None:  # noqa: E501
            _query_params.append(('operator', _params['operator']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "LookupsAccountNumberGet200Response",
            '404': "OpenapiResponseBodyLookupAccountNotFound",
            '422': "OpenapiResponseBodyValidationFailed",
            '500': "OpenapiResponseBodyInternalServerError",
        }

        return self.api_client.call_api(
            '/lookups/{accountNumber}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
