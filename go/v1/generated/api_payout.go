/*
Resources

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafikigen

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PayoutAPIService PayoutAPI service
type PayoutAPIService service

type ApiPayoutsGetRequest struct {
	ctx context.Context
	ApiService *PayoutAPIService
	createdAtFrom *string
	createdAtTo *string
	pagingLimit *int32
	pagingAfter *string
}

// Filters for payouts created from the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 00:00:00 UTC or a valid RFC3339 string, including time and/or offset information.
func (r ApiPayoutsGetRequest) CreatedAtFrom(createdAtFrom string) ApiPayoutsGetRequest {
	r.createdAtFrom = &createdAtFrom
	return r
}

// Filters for payouts created before the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 23:59:59 UTC or a valid RFC3339 string, including time and/or offset information.
func (r ApiPayoutsGetRequest) CreatedAtTo(createdAtTo string) ApiPayoutsGetRequest {
	r.createdAtTo = &createdAtTo
	return r
}

// The count of items returned as part of the pagination cursor iteration, minimum value is 1 and maximum 50
func (r ApiPayoutsGetRequest) PagingLimit(pagingLimit int32) ApiPayoutsGetRequest {
	r.pagingLimit = &pagingLimit
	return r
}

// The base64 URL encoded cursor used to access the next set of paginated results
func (r ApiPayoutsGetRequest) PagingAfter(pagingAfter string) ApiPayoutsGetRequest {
	r.pagingAfter = &pagingAfter
	return r
}

func (r ApiPayoutsGetRequest) Execute() (*PayoutsGet200Response, *http.Response, error) {
	return r.ApiService.PayoutsGetExecute(r)
}

/*
PayoutsGet List

Using this endpoint, you can list all your historical payouts with an optional dates filter. Considering that the returned data may contain thousands of records, the results will be paginated with a cursor [(see pagination docs)](pagination), allowing you to scroll through the data using multiple requests as necessary.






 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPayoutsGetRequest
*/
func (a *PayoutAPIService) PayoutsGet(ctx context.Context) ApiPayoutsGetRequest {
	return ApiPayoutsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PayoutsGet200Response
func (a *PayoutAPIService) PayoutsGetExecute(r ApiPayoutsGetRequest) (*PayoutsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PayoutsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayoutAPIService.PayoutsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payouts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.createdAtFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at_from", r.createdAtFrom, "")
	}
	if r.createdAtTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at_to", r.createdAtTo, "")
	}
	if r.pagingLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging_limit", r.pagingLimit, "")
	}
	if r.pagingAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paging_after", r.pagingAfter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v OpenapiResponseBodyValidationFailed
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v OpenapiResponseBodyInternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPayoutsIdGetRequest struct {
	ctx context.Context
	ApiService *PayoutAPIService
	id string
}

func (r ApiPayoutsIdGetRequest) Execute() (*PayoutsIdGet200Response, *http.Response, error) {
	return r.ApiService.PayoutsIdGetExecute(r)
}

/*
PayoutsIdGet Get

This endpoint enables the retrieval of a previously accepted payout using its unique ID (`pyt-xxx`) or the `custom_id` submitted when creating it. Its primary purpose is to periodically check for changes in the payout status.

To learn more about the lifecycle of payouts, please refer to the dedicated section under the [Send Money](post_payouts) endpoint.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The Payout ID (pyt-xxx) or the custom_id provided at the time of payout creation
 @return ApiPayoutsIdGetRequest
*/
func (a *PayoutAPIService) PayoutsIdGet(ctx context.Context, id string) ApiPayoutsIdGetRequest {
	return ApiPayoutsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PayoutsIdGet200Response
func (a *PayoutAPIService) PayoutsIdGetExecute(r ApiPayoutsIdGetRequest) (*PayoutsIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PayoutsIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayoutAPIService.PayoutsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payouts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v OpenapiResponseBodyNotFound
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v OpenapiResponseBodyInternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPayoutsPostRequest struct {
	ctx context.Context
	ApiService *PayoutAPIService
	xIdempotencyKey *string
	openapiPayoutCreateRequest *OpenapiPayoutCreateRequest
}

// 🚨️ Prevent duplicate payouts! See: [x-idempotency-key security scheme](idempotency)
func (r ApiPayoutsPostRequest) XIdempotencyKey(xIdempotencyKey string) ApiPayoutsPostRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

// The payout
func (r ApiPayoutsPostRequest) OpenapiPayoutCreateRequest(openapiPayoutCreateRequest OpenapiPayoutCreateRequest) ApiPayoutsPostRequest {
	r.openapiPayoutCreateRequest = &openapiPayoutCreateRequest
	return r
}

func (r ApiPayoutsPostRequest) Execute() (*PayoutsPost202Response, *http.Response, error) {
	return r.ApiService.PayoutsPostExecute(r)
}

/*
PayoutsPost Create

The payout resource finds its application in various scenarios where funds need to be disbursed electronically; For example, but not limited to, money remittance services or businesses that need to disburse salaries to their employees.

Regardless of your specific use case, this endpoint has you covered, offering a versatile API to facilitate money disbursement from your [local wallets](get_wallets) to designated recipients (a.k.a [payment accounts](post_payment-accounts)).

> ℹ️ Lifecycle
>
> If the request you submit meets our minimum validation standards for processing the payout, our server will accept the request. It will defer the execution to a background asynchronous process, and in response, send you an HTTP 202 status code, along with the payout unique identifier.
> <br>
> Upon acceptance, the payout is marked as pending. Your client program will need to poll at intervals to [query the payout state](get_payouts-id) and determine whether it has succeeded or not. After the payout is completed, provided [webhook notifications](webhooks) are set up, Rafiki will also dispatch [payout.state-updated](payoutstate-updated) events
> <br>
>
> <details>
>  <summary>Payout States</summary>
> <br>
>  <table>
>    <thead>
>        <tr>
>            <th>State</th>
>            <th>Description</th>
>        </tr>
>    </thead>
>    <tbody>
>        <tr>
>            <th>⏳<br>PENDING</th>
>            <th>Your payout has been accepted, and it is currently awaiting processing.</th>
>        </tr>
>        <tr>
>           <th>🎉<br>SENT</th>
>           <th>The payout has been successfully processed, and the intended recipient should have received the funds.</th>
>        </tr>
>        <tr>
>           <th>🔙<br>REVERSED</th>
>           <th>Upon reaching the "SENT" state, you can request a manual reversal (for instance, if funds were sent to the wrong recipient) by contacting our support team. Please be aware that there is no programmatic API available for this process yet. This state indicates a successful reversal.</th>
>        </tr>
>        <tr>
>           <th>🙅<br>CANCELLED</th>
>           <th>If the payout has not yet reached the intended recipient, you have the option to request manual cancellation by reaching out to our support team (please note that there is no programmatic API for this yet). This state signifies that the payout has been successfully canceled.</th>
>        </tr>
>        <tr>
>           <th>💔<br>FAILED</th>
>           <th>
>               The funds did not reach the intended recipient due to a failure. If the "context" property does not provide specific information about the reason for the failure, please contact our customer support for assistance.
>           </th>
>        </tr>
>    </tbody>
>  </table>
>  </details>
> <br>
> <details>
>  <summary>Payout state context</summary>
> <br>
> When a payout fails, the "context" property of the state object will provide additional information about the reason for the failure. The table below outlines the possible values for this property.
>
> #### `WALLET_INSUFFICIENT_BALANCE`
>
> The selected wallet currently doesn't have enough money to process the payout. <br><br>
>
> #### `PAYMENT_ACCOUNT_INVALID_ACCOUNT_NUMBER`
>
> The account number provided is invalid. <br><br>
>
> #### `PAYMENT_ACCOUNT_BALANCE_MAXED_OUT`
>
> The payment account balance has reached the maximum allowed. <br><br>
>
> #### `PAYMENT_ACCOUNT_PER_TRANSACTION_LIMIT_REACHED`
>
> The amount to be sent exceeds the maximum allowed per transaction for this payment account <br><br>
>
> #### `PAYMENT_ACCOUNT_DAILY_LIMIT_REACHED`
>
> The payment account has reached the daily limit or would reach it by processing this payout. <br><br>
>
> #### `PAYMENT_ACCOUNT_MONTHLY_LIMIT_REACHED`
>
> The payment account has reached the monthly limit or would reach it by processing this payout. <br><br>
>
> #### `PAYMENT_ACCOUNT_LIMIT_REACHED`
>
> The payment account has reached a limit but we don't know which one. <br><br>
>
>  </details>

> 📘 Payout amount limits
>
> Depending on the payment account type and destination currency, different transactions amount limits apply.
> <br>
> Such limits might be enforced for compliance reasons or mandated by the banking authority that owns the payment account or the country in which the account resides.
> <br>
> <details>
> <summary>Per transaction limits</summary>
> <br>
> <table>
>     <thead>
>         <th>Country</th>
>         <th>Minimum</th>
>         <th>Maximum</th>
>    </thead>
>    <tbody>
>          <tr style="text-align: center; vertical-align: middle;">
>             <td>🇰🇪 Kenya</td>
>             <td>KSh 140</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Bank Account</th>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>KSh 950,000</td>
>                             <td>KSh 250,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇹🇿 Tanzania</td>
>             <td>TSh 2,500</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Bank Account</th>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>TSh 20,000,000</td>
>                             <td>TSh 5,000,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇷🇼 Rwanda</td>
>             <td>R&#x20A3; 500</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td style="text-align: center; vertical-align: middle;">
>                                 <strong>MTN</strong> R&#x20A3; 2,000,000 <br>
>                                 <strong>Airtel</strong> R&#x20A3; 500,000 <br>
>                             </td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇳🇬 Nigeria</td>
>             <td>&#x20A6; 100</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Bank Account</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>&#x20A6; 50,000,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇬🇭 Ghana</td>
>             <td>&#8373; 10</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Bank Account</th>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>&#8373; 50,000</td>
>                             <td>&#8373; 15,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇺🇬 Uganda</td>
>             <td>USh 5,000</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Bank Account</th>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>USh 5,000,000</td>
>                             <td>USh 5,000,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇪🇬 Egypt</td>
>             <td>&pound; 200</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Bank Account</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>&pound; 300,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇸🇳 Senegal</td>
>             <td>XOF 2,000</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>XOF 1,500,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇨🇮 C&ocirc;te d'Ivoire</td>
>             <td>XOF 2,000</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>XOF 1,500,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>         <tr style="text-align: center; vertical-align: middle;">
>             <td>🇨🇲 Cameroon</td>
>             <td>XAF 500</td>
>             <td>
>                 <table>
>                     <thead>
>                         <th>Mobile Money</th>
>                     </thead>
>                     <tbody>
>                         <tr>
>                             <td>XAF 1,000,000</td>
>                         </tr>
>                     </tbody>
>                 </table>
>             </td>
>         </tr>
>     </tbody>
> </table>
> </details>

> ⚠️ Sender requirements
>
> Some countries might necessitate different and more comprehensive sender details.
> <br>
> We understand that navigating these varying rules for different countries can be complex, considering the multitude of combinations possible. To simplify this process, you can detail the requirements for each country listed below.
> <br>
>
> <details>
> <summary>🇰🇪 Kenya</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>-</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>-</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>-</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Kenya -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>-</td> <!-- Kenya -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇳🇬 Nigeria</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Nigeria -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Nigeria -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇹🇿 Tanzania</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Tanzania -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Tanzania -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇷🇼 Rwanda</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Rwanda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Rwanda -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇬🇭 Ghana</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Ghana -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Ghana -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇺🇬 Uganda</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Uganda -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Uganda -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇪🇬 Egypt</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Egypt -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Egypt -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇸🇳 Senegal</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Senegal -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Senegal -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇨🇮 C&ocirc;te d'Ivoire</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Côte d'Ivoire -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Côte d'Ivoire -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>
>
> <details>
> <summary>🇨🇲 Cameroon</summary>
> <table>
>     <thead>
>         <tr>
>             <th>Field</th>
>             <th>Requirements</th>
>         </tr>
>     </thead>
>     <tbody>
>         <tr>
>             <td>sender.type</td>
>             <td>Required</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.name</td>
>             <td>Required</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.address.line1</td>
>             <td>Required</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.address.line2</td>
>             <td>-</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.address.line3</td>
>             <td>-</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.address.city</td>
>             <td>Required</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.address.postal_code</td>
>             <td>Required</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.address.country</td>
>             <td>Required</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.individual.dob</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.type</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.country</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.number</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.issued_on</td>
>             <td>-</td> <!-- Cameroon -->
>         </tr>
>         <tr>
>             <td>sender.individual.identity_document.expires_on</td>
>             <td>Required (with type INDIVIDUAL)</td> <!-- Cameroon -->
>         </tr>
>     </tbody>
> </table>
> <br>
> </details>


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPayoutsPostRequest
*/
func (a *PayoutAPIService) PayoutsPost(ctx context.Context) ApiPayoutsPostRequest {
	return ApiPayoutsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PayoutsPost202Response
func (a *PayoutAPIService) PayoutsPostExecute(r ApiPayoutsPostRequest) (*PayoutsPost202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PayoutsPost202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PayoutAPIService.PayoutsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payouts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xIdempotencyKey == nil {
		return localVarReturnValue, nil, reportError("xIdempotencyKey is required and must be specified")
	}
	if r.openapiPayoutCreateRequest == nil {
		return localVarReturnValue, nil, reportError("openapiPayoutCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Idempotency-Key", r.xIdempotencyKey, "")
	// body params
	localVarPostBody = r.openapiPayoutCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v OpenapiResponseBodyWalletInsufficientBalance
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v OpenapiResponseBodyIdempotencyConflict
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v OpenapiResponseBodyValidationFailed
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v OpenapiResponseBodyInternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
