/*
 * Resources
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package rafikigen;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OpenapiPayoutCreateRequest;
import org.openapitools.client.model.OpenapiResponseBodyValidationFailed;
import org.openapitools.client.model.OpenapiResponseBodyWalletInsufficientBalance;
import org.openapitools.client.model.PayoutsGet200Response;
import org.openapitools.client.model.PayoutsIdGet200Response;
import org.openapitools.client.model.PayoutsPost202Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayoutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for payoutsGet
     * @param createdAtFrom Filters for payouts created from the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 00:00:00 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param createdAtTo Filters for payouts created before the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 23:59:59 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param pagingLimit The count of items returned as part of the pagination cursor iteration, minimum value is 1 and maximum 50 (optional)
     * @param pagingAfter The base64 URL encoded cursor used to access the next set of paginated results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payoutsGetCall(String createdAtFrom, String createdAtTo, Integer pagingLimit, String pagingAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdAtFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_from", createdAtFrom));
        }

        if (createdAtTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_to", createdAtTo));
        }

        if (pagingLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging_limit", pagingLimit));
        }

        if (pagingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paging_after", pagingAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payoutsGetValidateBeforeCall(String createdAtFrom, String createdAtTo, Integer pagingLimit, String pagingAfter, final ApiCallback _callback) throws ApiException {
        return payoutsGetCall(createdAtFrom, createdAtTo, pagingLimit, pagingAfter, _callback);

    }

    /**
     * List
     * Using this endpoint, you can list all your historical payouts with an optional dates filter. Considering that the returned data may contain thousands of records, the results will be paginated with a cursor [(see pagination docs)](pagination), allowing you to scroll through the data using multiple requests as necessary.     
     * @param createdAtFrom Filters for payouts created from the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 00:00:00 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param createdAtTo Filters for payouts created before the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 23:59:59 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param pagingLimit The count of items returned as part of the pagination cursor iteration, minimum value is 1 and maximum 50 (optional)
     * @param pagingAfter The base64 URL encoded cursor used to access the next set of paginated results (optional)
     * @return PayoutsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PayoutsGet200Response payoutsGet(String createdAtFrom, String createdAtTo, Integer pagingLimit, String pagingAfter) throws ApiException {
        ApiResponse<PayoutsGet200Response> localVarResp = payoutsGetWithHttpInfo(createdAtFrom, createdAtTo, pagingLimit, pagingAfter);
        return localVarResp.getData();
    }

    /**
     * List
     * Using this endpoint, you can list all your historical payouts with an optional dates filter. Considering that the returned data may contain thousands of records, the results will be paginated with a cursor [(see pagination docs)](pagination), allowing you to scroll through the data using multiple requests as necessary.     
     * @param createdAtFrom Filters for payouts created from the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 00:00:00 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param createdAtTo Filters for payouts created before the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 23:59:59 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param pagingLimit The count of items returned as part of the pagination cursor iteration, minimum value is 1 and maximum 50 (optional)
     * @param pagingAfter The base64 URL encoded cursor used to access the next set of paginated results (optional)
     * @return ApiResponse&lt;PayoutsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayoutsGet200Response> payoutsGetWithHttpInfo(String createdAtFrom, String createdAtTo, Integer pagingLimit, String pagingAfter) throws ApiException {
        okhttp3.Call localVarCall = payoutsGetValidateBeforeCall(createdAtFrom, createdAtTo, pagingLimit, pagingAfter, null);
        Type localVarReturnType = new TypeToken<PayoutsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List (asynchronously)
     * Using this endpoint, you can list all your historical payouts with an optional dates filter. Considering that the returned data may contain thousands of records, the results will be paginated with a cursor [(see pagination docs)](pagination), allowing you to scroll through the data using multiple requests as necessary.     
     * @param createdAtFrom Filters for payouts created from the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 00:00:00 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param createdAtTo Filters for payouts created before the specified datetime. The expected format can be either a standard date (YYYY-MM-DD) that defaults to 23:59:59 UTC or a valid RFC3339 string, including time and/or offset information. (optional)
     * @param pagingLimit The count of items returned as part of the pagination cursor iteration, minimum value is 1 and maximum 50 (optional)
     * @param pagingAfter The base64 URL encoded cursor used to access the next set of paginated results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payoutsGetAsync(String createdAtFrom, String createdAtTo, Integer pagingLimit, String pagingAfter, final ApiCallback<PayoutsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = payoutsGetValidateBeforeCall(createdAtFrom, createdAtTo, pagingLimit, pagingAfter, _callback);
        Type localVarReturnType = new TypeToken<PayoutsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payoutsIdGet
     * @param id The Payout ID (pyt-xxx) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payoutsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payouts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payoutsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling payoutsIdGet(Async)");
        }

        return payoutsIdGetCall(id, _callback);

    }

    /**
     * Query status
     * This endpoint enables the retrieval of a previously accepted payout using its unique ID (&#x60;pyt-xxx&#x60;). Its primary purpose is to periodically check for changes in the payout status. Currently, we do not provide webhooks, so this method serves as the only available option in such cases.  To learn more about the lifecycle of payouts, please refer to the dedicated section under the [Send Money](post_payouts) endpoint.
     * @param id The Payout ID (pyt-xxx) (required)
     * @return PayoutsIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PayoutsIdGet200Response payoutsIdGet(String id) throws ApiException {
        ApiResponse<PayoutsIdGet200Response> localVarResp = payoutsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Query status
     * This endpoint enables the retrieval of a previously accepted payout using its unique ID (&#x60;pyt-xxx&#x60;). Its primary purpose is to periodically check for changes in the payout status. Currently, we do not provide webhooks, so this method serves as the only available option in such cases.  To learn more about the lifecycle of payouts, please refer to the dedicated section under the [Send Money](post_payouts) endpoint.
     * @param id The Payout ID (pyt-xxx) (required)
     * @return ApiResponse&lt;PayoutsIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayoutsIdGet200Response> payoutsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = payoutsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PayoutsIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query status (asynchronously)
     * This endpoint enables the retrieval of a previously accepted payout using its unique ID (&#x60;pyt-xxx&#x60;). Its primary purpose is to periodically check for changes in the payout status. Currently, we do not provide webhooks, so this method serves as the only available option in such cases.  To learn more about the lifecycle of payouts, please refer to the dedicated section under the [Send Money](post_payouts) endpoint.
     * @param id The Payout ID (pyt-xxx) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payoutsIdGetAsync(String id, final ApiCallback<PayoutsIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = payoutsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PayoutsIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for payoutsPost
     * @param xIdempotencyKey 🚨️ Prevent duplicate payouts! See: [x-idempotency-key security scheme](idempotency) (required)
     * @param openapiPayoutCreateRequest The payout (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough balance </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payoutsPostCall(String xIdempotencyKey, OpenapiPayoutCreateRequest openapiPayoutCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openapiPayoutCreateRequest;

        // create path and map variables
        String localVarPath = "/payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xIdempotencyKey != null) {
            localVarHeaderParams.put("X-Idempotency-Key", localVarApiClient.parameterToString(xIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call payoutsPostValidateBeforeCall(String xIdempotencyKey, OpenapiPayoutCreateRequest openapiPayoutCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling payoutsPost(Async)");
        }

        // verify the required parameter 'openapiPayoutCreateRequest' is set
        if (openapiPayoutCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'openapiPayoutCreateRequest' when calling payoutsPost(Async)");
        }

        return payoutsPostCall(xIdempotencyKey, openapiPayoutCreateRequest, _callback);

    }

    /**
     * Send money
     * The payout resource finds its application in various scenarios where funds need to be disbursed electronically; For example, but not limited to, money remittance services or businesses that need to disburse salaries to their employees.  Regardless of your specific use case, this endpoint has you covered, offering a versatile API to facilitate money disbursement from your [local wallets](get_wallets) to designated recipients (a.k.a [payment accounts](post_payment-accounts)).  &gt; ℹ️ Lifecycle &gt; &gt; If the request you submit meets our minimum validation standards for processing the payout, our server will accept the request. It will defer the execution to a background asynchronous process, and in response, send you an HTTP 202 status code, along with the payout unique identifier. &gt; &lt;br&gt; &gt; Upon acceptance, the payout is marked as pending. Your client program will need to poll at intervals to [query the payout state](get_payouts-id) and determine whether it has succeeded or not. &gt; &lt;br&gt; &gt; &lt;details&gt; &gt;  &lt;summary&gt;Payout States&lt;/summary&gt; &gt; &lt;br&gt; &gt;  &lt;table&gt; &gt;    &lt;thead&gt; &gt;        &lt;tr&gt; &gt;            &lt;th&gt;State&lt;/th&gt; &gt;            &lt;th&gt;Description&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;    &lt;/thead&gt; &gt;    &lt;tbody&gt; &gt;        &lt;tr&gt; &gt;            &lt;th&gt;⏳&lt;br&gt;PENDING&lt;/th&gt; &gt;            &lt;th&gt;Your payout has been accepted, and it is currently awaiting processing.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🎉&lt;br&gt;SENT&lt;/th&gt; &gt;           &lt;th&gt;The payout has been successfully processed, and the intended recipient should have received the funds.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🔙&lt;br&gt;REVERSED&lt;/th&gt; &gt;           &lt;th&gt;Upon reaching the \&quot;SENT\&quot; state, you can request a manual reversal (for instance, if funds were sent to the wrong recipient) by contacting our support team. Please be aware that there is no programmatic API available for this process yet. This state indicates a successful reversal.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🙅&lt;br&gt;CANCELLED&lt;/th&gt; &gt;           &lt;th&gt;If the payout has not yet reached the intended recipient, you have the option to request manual cancellation by reaching out to our support team (please note that there is no programmatic API for this yet). This state signifies that the payout has been successfully canceled.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;💔&lt;br&gt;FAILED&lt;/th&gt; &gt;           &lt;th&gt; &gt;               The funds did not reach the intended recipient due to a failure. If the \&quot;context\&quot; property does not provide specific information about the reason for the failure, please contact our customer support for assistance. &gt;           &lt;/th&gt; &gt;        &lt;/tr&gt; &gt;    &lt;/tbody&gt; &gt;  &lt;/table&gt; &gt;  &lt;/details&gt;  &gt; ⚠️ Compliance requirements &gt;  &gt; Depending on the country and/or bank you plan to disburse money to, there are specific compliance and regulatory requirements that must be adhered to. For example, some countries might necessitate more comprehensive sender details or impose limits on minimum/maximum payout amounts. &gt; &lt;br&gt; &gt; We understand that navigating these varying rules for different countries can be complex, considering the multitude of combinations possible. To simplify this process for you, the table below outlines the specific requirements for each country we offer payout support, streamlining the compliance process. &gt; &lt;br&gt; &gt; &lt;details&gt; &lt;summary&gt;Requirements&lt;/summary&gt; &lt;table&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;Field&lt;/th&gt;             &lt;th&gt;KE 🇰🇪&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         &lt;tr&gt;             &lt;td&gt;amount.value&lt;/td&gt;             &lt;td&gt;                 &lt;table&gt;                     &lt;thead&gt;                          &lt;tr&gt;                             &lt;th&gt;Min&lt;/th&gt;                             &lt;th&gt;Max&lt;/th&gt;                         &lt;/tr&gt;                     &lt;/thead&gt;                     &lt;tbody&gt;                         &lt;tr&gt;                             &lt;td&gt;140 KES&lt;/td&gt;                             &lt;td&gt;500,000 KES&lt;/td&gt; &lt;!-- Kenya --&gt;                         &lt;/tr&gt;                     &lt;/tbody&gt;                 &lt;/table&gt;             &lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.type&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.name&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line1&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line2&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line3&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.city&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.postal_code&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.country&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.dob&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.dob&lt;/td&gt;             &lt;td&gt;Required with INDIVIDUAL sender&#39;s type&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.type&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.country&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.number&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.issued_on&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.expires_on&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;     &lt;/tbody&gt; &lt;/table&gt; &lt;/details&gt;
     * @param xIdempotencyKey 🚨️ Prevent duplicate payouts! See: [x-idempotency-key security scheme](idempotency) (required)
     * @param openapiPayoutCreateRequest The payout (required)
     * @return PayoutsPost202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough balance </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public PayoutsPost202Response payoutsPost(String xIdempotencyKey, OpenapiPayoutCreateRequest openapiPayoutCreateRequest) throws ApiException {
        ApiResponse<PayoutsPost202Response> localVarResp = payoutsPostWithHttpInfo(xIdempotencyKey, openapiPayoutCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Send money
     * The payout resource finds its application in various scenarios where funds need to be disbursed electronically; For example, but not limited to, money remittance services or businesses that need to disburse salaries to their employees.  Regardless of your specific use case, this endpoint has you covered, offering a versatile API to facilitate money disbursement from your [local wallets](get_wallets) to designated recipients (a.k.a [payment accounts](post_payment-accounts)).  &gt; ℹ️ Lifecycle &gt; &gt; If the request you submit meets our minimum validation standards for processing the payout, our server will accept the request. It will defer the execution to a background asynchronous process, and in response, send you an HTTP 202 status code, along with the payout unique identifier. &gt; &lt;br&gt; &gt; Upon acceptance, the payout is marked as pending. Your client program will need to poll at intervals to [query the payout state](get_payouts-id) and determine whether it has succeeded or not. &gt; &lt;br&gt; &gt; &lt;details&gt; &gt;  &lt;summary&gt;Payout States&lt;/summary&gt; &gt; &lt;br&gt; &gt;  &lt;table&gt; &gt;    &lt;thead&gt; &gt;        &lt;tr&gt; &gt;            &lt;th&gt;State&lt;/th&gt; &gt;            &lt;th&gt;Description&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;    &lt;/thead&gt; &gt;    &lt;tbody&gt; &gt;        &lt;tr&gt; &gt;            &lt;th&gt;⏳&lt;br&gt;PENDING&lt;/th&gt; &gt;            &lt;th&gt;Your payout has been accepted, and it is currently awaiting processing.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🎉&lt;br&gt;SENT&lt;/th&gt; &gt;           &lt;th&gt;The payout has been successfully processed, and the intended recipient should have received the funds.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🔙&lt;br&gt;REVERSED&lt;/th&gt; &gt;           &lt;th&gt;Upon reaching the \&quot;SENT\&quot; state, you can request a manual reversal (for instance, if funds were sent to the wrong recipient) by contacting our support team. Please be aware that there is no programmatic API available for this process yet. This state indicates a successful reversal.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🙅&lt;br&gt;CANCELLED&lt;/th&gt; &gt;           &lt;th&gt;If the payout has not yet reached the intended recipient, you have the option to request manual cancellation by reaching out to our support team (please note that there is no programmatic API for this yet). This state signifies that the payout has been successfully canceled.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;💔&lt;br&gt;FAILED&lt;/th&gt; &gt;           &lt;th&gt; &gt;               The funds did not reach the intended recipient due to a failure. If the \&quot;context\&quot; property does not provide specific information about the reason for the failure, please contact our customer support for assistance. &gt;           &lt;/th&gt; &gt;        &lt;/tr&gt; &gt;    &lt;/tbody&gt; &gt;  &lt;/table&gt; &gt;  &lt;/details&gt;  &gt; ⚠️ Compliance requirements &gt;  &gt; Depending on the country and/or bank you plan to disburse money to, there are specific compliance and regulatory requirements that must be adhered to. For example, some countries might necessitate more comprehensive sender details or impose limits on minimum/maximum payout amounts. &gt; &lt;br&gt; &gt; We understand that navigating these varying rules for different countries can be complex, considering the multitude of combinations possible. To simplify this process for you, the table below outlines the specific requirements for each country we offer payout support, streamlining the compliance process. &gt; &lt;br&gt; &gt; &lt;details&gt; &lt;summary&gt;Requirements&lt;/summary&gt; &lt;table&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;Field&lt;/th&gt;             &lt;th&gt;KE 🇰🇪&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         &lt;tr&gt;             &lt;td&gt;amount.value&lt;/td&gt;             &lt;td&gt;                 &lt;table&gt;                     &lt;thead&gt;                          &lt;tr&gt;                             &lt;th&gt;Min&lt;/th&gt;                             &lt;th&gt;Max&lt;/th&gt;                         &lt;/tr&gt;                     &lt;/thead&gt;                     &lt;tbody&gt;                         &lt;tr&gt;                             &lt;td&gt;140 KES&lt;/td&gt;                             &lt;td&gt;500,000 KES&lt;/td&gt; &lt;!-- Kenya --&gt;                         &lt;/tr&gt;                     &lt;/tbody&gt;                 &lt;/table&gt;             &lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.type&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.name&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line1&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line2&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line3&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.city&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.postal_code&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.country&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.dob&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.dob&lt;/td&gt;             &lt;td&gt;Required with INDIVIDUAL sender&#39;s type&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.type&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.country&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.number&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.issued_on&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.expires_on&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;     &lt;/tbody&gt; &lt;/table&gt; &lt;/details&gt;
     * @param xIdempotencyKey 🚨️ Prevent duplicate payouts! See: [x-idempotency-key security scheme](idempotency) (required)
     * @param openapiPayoutCreateRequest The payout (required)
     * @return ApiResponse&lt;PayoutsPost202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough balance </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayoutsPost202Response> payoutsPostWithHttpInfo(String xIdempotencyKey, OpenapiPayoutCreateRequest openapiPayoutCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = payoutsPostValidateBeforeCall(xIdempotencyKey, openapiPayoutCreateRequest, null);
        Type localVarReturnType = new TypeToken<PayoutsPost202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send money (asynchronously)
     * The payout resource finds its application in various scenarios where funds need to be disbursed electronically; For example, but not limited to, money remittance services or businesses that need to disburse salaries to their employees.  Regardless of your specific use case, this endpoint has you covered, offering a versatile API to facilitate money disbursement from your [local wallets](get_wallets) to designated recipients (a.k.a [payment accounts](post_payment-accounts)).  &gt; ℹ️ Lifecycle &gt; &gt; If the request you submit meets our minimum validation standards for processing the payout, our server will accept the request. It will defer the execution to a background asynchronous process, and in response, send you an HTTP 202 status code, along with the payout unique identifier. &gt; &lt;br&gt; &gt; Upon acceptance, the payout is marked as pending. Your client program will need to poll at intervals to [query the payout state](get_payouts-id) and determine whether it has succeeded or not. &gt; &lt;br&gt; &gt; &lt;details&gt; &gt;  &lt;summary&gt;Payout States&lt;/summary&gt; &gt; &lt;br&gt; &gt;  &lt;table&gt; &gt;    &lt;thead&gt; &gt;        &lt;tr&gt; &gt;            &lt;th&gt;State&lt;/th&gt; &gt;            &lt;th&gt;Description&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;    &lt;/thead&gt; &gt;    &lt;tbody&gt; &gt;        &lt;tr&gt; &gt;            &lt;th&gt;⏳&lt;br&gt;PENDING&lt;/th&gt; &gt;            &lt;th&gt;Your payout has been accepted, and it is currently awaiting processing.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🎉&lt;br&gt;SENT&lt;/th&gt; &gt;           &lt;th&gt;The payout has been successfully processed, and the intended recipient should have received the funds.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🔙&lt;br&gt;REVERSED&lt;/th&gt; &gt;           &lt;th&gt;Upon reaching the \&quot;SENT\&quot; state, you can request a manual reversal (for instance, if funds were sent to the wrong recipient) by contacting our support team. Please be aware that there is no programmatic API available for this process yet. This state indicates a successful reversal.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;🙅&lt;br&gt;CANCELLED&lt;/th&gt; &gt;           &lt;th&gt;If the payout has not yet reached the intended recipient, you have the option to request manual cancellation by reaching out to our support team (please note that there is no programmatic API for this yet). This state signifies that the payout has been successfully canceled.&lt;/th&gt; &gt;        &lt;/tr&gt; &gt;        &lt;tr&gt; &gt;           &lt;th&gt;💔&lt;br&gt;FAILED&lt;/th&gt; &gt;           &lt;th&gt; &gt;               The funds did not reach the intended recipient due to a failure. If the \&quot;context\&quot; property does not provide specific information about the reason for the failure, please contact our customer support for assistance. &gt;           &lt;/th&gt; &gt;        &lt;/tr&gt; &gt;    &lt;/tbody&gt; &gt;  &lt;/table&gt; &gt;  &lt;/details&gt;  &gt; ⚠️ Compliance requirements &gt;  &gt; Depending on the country and/or bank you plan to disburse money to, there are specific compliance and regulatory requirements that must be adhered to. For example, some countries might necessitate more comprehensive sender details or impose limits on minimum/maximum payout amounts. &gt; &lt;br&gt; &gt; We understand that navigating these varying rules for different countries can be complex, considering the multitude of combinations possible. To simplify this process for you, the table below outlines the specific requirements for each country we offer payout support, streamlining the compliance process. &gt; &lt;br&gt; &gt; &lt;details&gt; &lt;summary&gt;Requirements&lt;/summary&gt; &lt;table&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;Field&lt;/th&gt;             &lt;th&gt;KE 🇰🇪&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         &lt;tr&gt;             &lt;td&gt;amount.value&lt;/td&gt;             &lt;td&gt;                 &lt;table&gt;                     &lt;thead&gt;                          &lt;tr&gt;                             &lt;th&gt;Min&lt;/th&gt;                             &lt;th&gt;Max&lt;/th&gt;                         &lt;/tr&gt;                     &lt;/thead&gt;                     &lt;tbody&gt;                         &lt;tr&gt;                             &lt;td&gt;140 KES&lt;/td&gt;                             &lt;td&gt;500,000 KES&lt;/td&gt; &lt;!-- Kenya --&gt;                         &lt;/tr&gt;                     &lt;/tbody&gt;                 &lt;/table&gt;             &lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.type&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.name&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line1&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line2&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.line3&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.city&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.postal_code&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.address.country&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.dob&lt;/td&gt;             &lt;td&gt;Required&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.dob&lt;/td&gt;             &lt;td&gt;Required with INDIVIDUAL sender&#39;s type&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.type&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.country&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.number&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.issued_on&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;sender.individual.identity_document.expires_on&lt;/td&gt;             &lt;td&gt;-&lt;/td&gt; &lt;!-- Kenya --&gt;         &lt;/tr&gt;     &lt;/tbody&gt; &lt;/table&gt; &lt;/details&gt;
     * @param xIdempotencyKey 🚨️ Prevent duplicate payouts! See: [x-idempotency-key security scheme](idempotency) (required)
     * @param openapiPayoutCreateRequest The payout (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough balance </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call payoutsPostAsync(String xIdempotencyKey, OpenapiPayoutCreateRequest openapiPayoutCreateRequest, final ApiCallback<PayoutsPost202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = payoutsPostValidateBeforeCall(xIdempotencyKey, openapiPayoutCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PayoutsPost202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
