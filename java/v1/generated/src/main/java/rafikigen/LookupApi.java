/*
 * Resources
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package rafikigen;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LookupsAccountNumberGet200Response;
import org.openapitools.client.model.OpenapiResponseBodyInternalServerError;
import org.openapitools.client.model.OpenapiResponseBodyLookupAccountNotFound;
import org.openapitools.client.model.OpenapiResponseBodyValidationFailed;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LookupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lookupsAccountNumberGet
     * @param paymentAccountType The payment account type to lookup for (required)
     * @param accountNumber The account number, that is either the mobile money number or bank account number (required)
     * @param bankId If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)
     * @param operator If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found looked up account number information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The provided account identifier is unregistered / couldn&#39;t be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, e.g. missing payment_account_type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupsAccountNumberGetCall(String paymentAccountType, String accountNumber, String bankId, String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookups/{accountNumber}"
            .replace("{" + "accountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paymentAccountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_account_type", paymentAccountType));
        }

        if (bankId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bank_id", bankId));
        }

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupsAccountNumberGetValidateBeforeCall(String paymentAccountType, String accountNumber, String bankId, String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentAccountType' is set
        if (paymentAccountType == null) {
            throw new ApiException("Missing the required parameter 'paymentAccountType' when calling lookupsAccountNumberGet(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling lookupsAccountNumberGet(Async)");
        }

        return lookupsAccountNumberGetCall(paymentAccountType, accountNumber, bankId, operator, _callback);

    }

    /**
     * Get
     * The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:--------------|:------------:|:------------:| | üá≥üá¨ Nigeria  |     ‚ùå       |      ‚úÖ      | | üá∫üá¨ Uganda   |     ‚úÖ       |      ‚úÖ      | | üá¨üá≠ Ghana    |     ‚úÖ       |      ‚úÖ      | | üá∞üá™ Kenya    |     ‚úÖ       |      ‚úÖ      | 
     * @param paymentAccountType The payment account type to lookup for (required)
     * @param accountNumber The account number, that is either the mobile money number or bank account number (required)
     * @param bankId If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)
     * @param operator If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)
     * @return LookupsAccountNumberGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found looked up account number information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The provided account identifier is unregistered / couldn&#39;t be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, e.g. missing payment_account_type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public LookupsAccountNumberGet200Response lookupsAccountNumberGet(String paymentAccountType, String accountNumber, String bankId, String operator) throws ApiException {
        ApiResponse<LookupsAccountNumberGet200Response> localVarResp = lookupsAccountNumberGetWithHttpInfo(paymentAccountType, accountNumber, bankId, operator);
        return localVarResp.getData();
    }

    /**
     * Get
     * The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:--------------|:------------:|:------------:| | üá≥üá¨ Nigeria  |     ‚ùå       |      ‚úÖ      | | üá∫üá¨ Uganda   |     ‚úÖ       |      ‚úÖ      | | üá¨üá≠ Ghana    |     ‚úÖ       |      ‚úÖ      | | üá∞üá™ Kenya    |     ‚úÖ       |      ‚úÖ      | 
     * @param paymentAccountType The payment account type to lookup for (required)
     * @param accountNumber The account number, that is either the mobile money number or bank account number (required)
     * @param bankId If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)
     * @param operator If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)
     * @return ApiResponse&lt;LookupsAccountNumberGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found looked up account number information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The provided account identifier is unregistered / couldn&#39;t be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, e.g. missing payment_account_type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LookupsAccountNumberGet200Response> lookupsAccountNumberGetWithHttpInfo(String paymentAccountType, String accountNumber, String bankId, String operator) throws ApiException {
        okhttp3.Call localVarCall = lookupsAccountNumberGetValidateBeforeCall(paymentAccountType, accountNumber, bankId, operator, null);
        Type localVarReturnType = new TypeToken<LookupsAccountNumberGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get (asynchronously)
     * The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:--------------|:------------:|:------------:| | üá≥üá¨ Nigeria  |     ‚ùå       |      ‚úÖ      | | üá∫üá¨ Uganda   |     ‚úÖ       |      ‚úÖ      | | üá¨üá≠ Ghana    |     ‚úÖ       |      ‚úÖ      | | üá∞üá™ Kenya    |     ‚úÖ       |      ‚úÖ      | 
     * @param paymentAccountType The payment account type to lookup for (required)
     * @param accountNumber The account number, that is either the mobile money number or bank account number (required)
     * @param bankId If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)
     * @param operator If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The found looked up account number information </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The provided account identifier is unregistered / couldn&#39;t be found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, e.g. missing payment_account_type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupsAccountNumberGetAsync(String paymentAccountType, String accountNumber, String bankId, String operator, final ApiCallback<LookupsAccountNumberGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupsAccountNumberGetValidateBeforeCall(paymentAccountType, accountNumber, bankId, operator, _callback);
        Type localVarReturnType = new TypeToken<LookupsAccountNumberGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
