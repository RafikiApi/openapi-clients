/*
 * Resources
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = rafikigen.Client.OpenAPIDateConverter;

namespace rafikigen.Model
{
    /// <summary>
    /// OpenapiResponseBodyLookupAccountNotFound
    /// </summary>
    [DataContract(Name = "openapi.ResponseBodyLookupAccountNotFound")]
    public partial class OpenapiResponseBodyLookupAccountNotFound : IEquatable<OpenapiResponseBodyLookupAccountNotFound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenapiResponseBodyLookupAccountNotFound" /> class.
        /// </summary>
        /// <param name="code">&#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60;.</param>
        /// <param name="message">E.g. \&quot;Invalid bank account number, or, syntactically valid, but not registered with any banking entity\&quot;.</param>
        public OpenapiResponseBodyLookupAccountNotFound(string code = default(string), string message = default(string))
        {
            this.Code = code;
            this.Message = message;
        }

        /// <summary>
        /// &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60;
        /// </summary>
        /// <value>&#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60;</value>
        /// <example>LOOKUP_ACCOUNT_NOT_FOUND</example>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// E.g. \&quot;Invalid bank account number, or, syntactically valid, but not registered with any banking entity\&quot;
        /// </summary>
        /// <value>E.g. \&quot;Invalid bank account number, or, syntactically valid, but not registered with any banking entity\&quot;</value>
        /// <example>the provided account identifier {&#39;xxxxxxxxx&#39;} couldn&#39;t be looked up</example>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenapiResponseBodyLookupAccountNotFound {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenapiResponseBodyLookupAccountNotFound);
        }

        /// <summary>
        /// Returns true if OpenapiResponseBodyLookupAccountNotFound instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenapiResponseBodyLookupAccountNotFound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenapiResponseBodyLookupAccountNotFound input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
