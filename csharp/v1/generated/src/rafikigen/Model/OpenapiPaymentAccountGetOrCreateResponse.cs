/*
 * Resources
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = rafikigen.Client.OpenAPIDateConverter;

namespace rafikigen.Model
{
    /// <summary>
    /// OpenapiPaymentAccountGetOrCreateResponse
    /// </summary>
    [DataContract(Name = "openapi.PaymentAccountGetOrCreateResponse")]
    public partial class OpenapiPaymentAccountGetOrCreateResponse : IEquatable<OpenapiPaymentAccountGetOrCreateResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenapiPaymentAccountGetOrCreateResponse" /> class.
        /// </summary>
        /// <param name="bankAccount">bankAccount.</param>
        /// <param name="country">country.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="holder">holder.</param>
        /// <param name="id">The newly created payment account unique identifier.</param>
        /// <param name="mobileMoney">mobileMoney.</param>
        /// <param name="type">type (default to &quot;MOBILE_MONEY&quot;).</param>
        public OpenapiPaymentAccountGetOrCreateResponse(OpenapiPaymentAccountGetOrCreateResponseBankAccount bankAccount = default(OpenapiPaymentAccountGetOrCreateResponseBankAccount), string country = default(string), string createdAt = default(string), OpenapiPaymentAccountGetOrCreateResponseHolder holder = default(OpenapiPaymentAccountGetOrCreateResponseHolder), string id = default(string), OpenapiPaymentAccountGetOrCreateResponseMobileMoney mobileMoney = default(OpenapiPaymentAccountGetOrCreateResponseMobileMoney), string type = @"MOBILE_MONEY")
        {
            this.BankAccount = bankAccount;
            this.Country = country;
            this.CreatedAt = createdAt;
            this.Holder = holder;
            this.Id = id;
            this.MobileMoney = mobileMoney;
            // use default value if no "type" provided
            this.Type = type ?? @"MOBILE_MONEY";
        }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name = "bank_account", EmitDefaultValue = false)]
        public OpenapiPaymentAccountGetOrCreateResponseBankAccount BankAccount { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        /// <example>KE</example>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2006-01-02T15:04:05Z07:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Holder
        /// </summary>
        [DataMember(Name = "holder", EmitDefaultValue = false)]
        public OpenapiPaymentAccountGetOrCreateResponseHolder Holder { get; set; }

        /// <summary>
        /// The newly created payment account unique identifier
        /// </summary>
        /// <value>The newly created payment account unique identifier</value>
        /// <example>pac-xxx</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MobileMoney
        /// </summary>
        [DataMember(Name = "mobile_money", EmitDefaultValue = false)]
        public OpenapiPaymentAccountGetOrCreateResponseMobileMoney MobileMoney { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenapiPaymentAccountGetOrCreateResponse {\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MobileMoney: ").Append(MobileMoney).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenapiPaymentAccountGetOrCreateResponse);
        }

        /// <summary>
        /// Returns true if OpenapiPaymentAccountGetOrCreateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenapiPaymentAccountGetOrCreateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenapiPaymentAccountGetOrCreateResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BankAccount == input.BankAccount ||
                    (this.BankAccount != null &&
                    this.BankAccount.Equals(input.BankAccount))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Holder == input.Holder ||
                    (this.Holder != null &&
                    this.Holder.Equals(input.Holder))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MobileMoney == input.MobileMoney ||
                    (this.MobileMoney != null &&
                    this.MobileMoney.Equals(input.MobileMoney))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankAccount != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccount.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Holder != null)
                {
                    hashCode = (hashCode * 59) + this.Holder.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.MobileMoney != null)
                {
                    hashCode = (hashCode * 59) + this.MobileMoney.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
