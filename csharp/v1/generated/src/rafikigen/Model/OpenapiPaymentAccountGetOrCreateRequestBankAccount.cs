/*
 * Resources
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = rafikigen.Client.OpenAPIDateConverter;

namespace rafikigen.Model
{
    /// <summary>
    /// OpenapiPaymentAccountGetOrCreateRequestBankAccount
    /// </summary>
    [DataContract(Name = "openapi_PaymentAccountGetOrCreateRequest_bank_account")]
    public partial class OpenapiPaymentAccountGetOrCreateRequestBankAccount : IEquatable<OpenapiPaymentAccountGetOrCreateRequestBankAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenapiPaymentAccountGetOrCreateRequestBankAccount" /> class.
        /// </summary>
        /// <param name="bankId">&lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt;  The bank identifier representing the bank associated with the payment account.</param>
        /// <param name="branchId">&lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt; &lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required if the bank spans across multiple branches&lt;/span&gt;  The branch identifier representing the branch associated with the payment account.</param>
        /// <param name="number">&lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt;  The actual bank account number (alphanum)..</param>
        public OpenapiPaymentAccountGetOrCreateRequestBankAccount(string bankId = default(string), string branchId = default(string), string number = default(string))
        {
            this.BankId = bankId;
            this.BranchId = branchId;
            this.Number = number;
        }

        /// <summary>
        /// &lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt;  The bank identifier representing the bank associated with the payment account
        /// </summary>
        /// <value>&lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt;  The bank identifier representing the bank associated with the payment account</value>
        /// <example>bnk-xxx</example>
        [DataMember(Name = "bank_id", EmitDefaultValue = false)]
        public string BankId { get; set; }

        /// <summary>
        /// &lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt; &lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required if the bank spans across multiple branches&lt;/span&gt;  The branch identifier representing the branch associated with the payment account
        /// </summary>
        /// <value>&lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt; &lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required if the bank spans across multiple branches&lt;/span&gt;  The branch identifier representing the branch associated with the payment account</value>
        /// <example>brn-xxx</example>
        [DataMember(Name = "branch_id", EmitDefaultValue = false)]
        public string BranchId { get; set; }

        /// <summary>
        /// &lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt;  The actual bank account number (alphanum).
        /// </summary>
        /// <value>&lt;span style&#x3D;\&quot;color:#e95f6a;\&quot;&gt;required with type BANK_ACCOUNT&lt;/span&gt;  The actual bank account number (alphanum).</value>
        /// <example>12345678</example>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenapiPaymentAccountGetOrCreateRequestBankAccount {\n");
            sb.Append("  BankId: ").Append(BankId).Append("\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenapiPaymentAccountGetOrCreateRequestBankAccount);
        }

        /// <summary>
        /// Returns true if OpenapiPaymentAccountGetOrCreateRequestBankAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenapiPaymentAccountGetOrCreateRequestBankAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenapiPaymentAccountGetOrCreateRequestBankAccount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BankId == input.BankId ||
                    (this.BankId != null &&
                    this.BankId.Equals(input.BankId))
                ) && 
                (
                    this.BranchId == input.BranchId ||
                    (this.BranchId != null &&
                    this.BranchId.Equals(input.BranchId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankId != null)
                {
                    hashCode = (hashCode * 59) + this.BankId.GetHashCode();
                }
                if (this.BranchId != null)
                {
                    hashCode = (hashCode * 59) + this.BranchId.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
