/*
 * Resources
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using rafikigen.Client;
using rafikigen.Model;

namespace rafikigen.rafikigen
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </remarks>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupsAccountNumberGet200Response</returns>
        LookupsAccountNumberGet200Response LookupsAccountNumberGet(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </remarks>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupsAccountNumberGet200Response</returns>
        ApiResponse<LookupsAccountNumberGet200Response> LookupsAccountNumberGetWithHttpInfo(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </remarks>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupsAccountNumberGet200Response</returns>
        System.Threading.Tasks.Task<LookupsAccountNumberGet200Response> LookupsAccountNumberGetAsync(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </remarks>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupsAccountNumberGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupsAccountNumberGet200Response>> LookupsAccountNumberGetWithHttpInfoAsync(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupApi : ILookupApiSync, ILookupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LookupApi : ILookupApi
    {
        private rafikigen.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupApi(string basePath)
        {
            this.Configuration = rafikigen.Client.Configuration.MergeConfigurations(
                rafikigen.Client.GlobalConfiguration.Instance,
                new rafikigen.Client.Configuration { BasePath = basePath }
            );
            this.Client = new rafikigen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new rafikigen.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = rafikigen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LookupApi(rafikigen.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = rafikigen.Client.Configuration.MergeConfigurations(
                rafikigen.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new rafikigen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new rafikigen.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = rafikigen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LookupApi(rafikigen.Client.ISynchronousClient client, rafikigen.Client.IAsynchronousClient asyncClient, rafikigen.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = rafikigen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public rafikigen.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public rafikigen.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public rafikigen.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public rafikigen.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </summary>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LookupsAccountNumberGet200Response</returns>
        public LookupsAccountNumberGet200Response LookupsAccountNumberGet(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0)
        {
            rafikigen.Client.ApiResponse<LookupsAccountNumberGet200Response> localVarResponse = LookupsAccountNumberGetWithHttpInfo(paymentAccountType, accountNumber, bankId, varOperator);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </summary>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LookupsAccountNumberGet200Response</returns>
        public rafikigen.Client.ApiResponse<LookupsAccountNumberGet200Response> LookupsAccountNumberGetWithHttpInfo(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'paymentAccountType' is set
            if (paymentAccountType == null)
            {
                throw new rafikigen.Client.ApiException(400, "Missing required parameter 'paymentAccountType' when calling LookupApi->LookupsAccountNumberGet");
            }

            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
            {
                throw new rafikigen.Client.ApiException(400, "Missing required parameter 'accountNumber' when calling LookupApi->LookupsAccountNumberGet");
            }

            rafikigen.Client.RequestOptions localVarRequestOptions = new rafikigen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rafikigen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rafikigen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountNumber", rafikigen.Client.ClientUtils.ParameterToString(accountNumber)); // path parameter
            localVarRequestOptions.QueryParameters.Add(rafikigen.Client.ClientUtils.ParameterToMultiMap("", "payment_account_type", paymentAccountType));
            if (bankId != null)
            {
                localVarRequestOptions.QueryParameters.Add(rafikigen.Client.ClientUtils.ParameterToMultiMap("", "bank_id", bankId));
            }
            if (varOperator != null)
            {
                localVarRequestOptions.QueryParameters.Add(rafikigen.Client.ClientUtils.ParameterToMultiMap("", "operator", varOperator));
            }

            localVarRequestOptions.Operation = "LookupApi.LookupsAccountNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LookupsAccountNumberGet200Response>("/lookups/{accountNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupsAccountNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </summary>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupsAccountNumberGet200Response</returns>
        public async System.Threading.Tasks.Task<LookupsAccountNumberGet200Response> LookupsAccountNumberGetAsync(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            rafikigen.Client.ApiResponse<LookupsAccountNumberGet200Response> localVarResponse = await LookupsAccountNumberGetWithHttpInfoAsync(paymentAccountType, accountNumber, bankId, varOperator, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get The lookup resource facilitates the retrieval of metadata associated with mobile money or bank accounts. For instance, prior to creating payment accounts, you can utilize this endpoint to validate whether an account number corresponds to a specific business or individual.  This functionality proves especially valuable in ensuring that only validated payment accounts are utilized; for example, when integrated with other processes, such as payouts, it helps mitigate the risk of costly reversals or refunds resulting from funds being sent to an incorrect recipient.  ### Account not found  While we strive to ensure that our lookup sources are always up to date with the most recent data, we must consider instances when we cannot retrieve metadata for a requested payment account.  In such cases, our API will respond with the error code [LOOKUP_ACCOUNT_NOT_FOUND](error-codes#lookup_account_not_found-http-404), providing a way to programmatically determine whether the account lookup was unsuccessful.  For some cases like Kenya mobile money lookups, try again in 5 minutes after getting the &#x60;LOOKUP_ACCOUNT_NOT_FOUND&#x60; error. If we respond with the same error again, it is likely that the account is not registered with the operator.  ### Supported countries/account types  | Country       | Mobile Money | Bank Account | |:- -- -- -- -- -- -- -|:- -- -- -- -- -- -:|:- -- -- -- -- -- -:| | 🇳🇬 Nigeria  |     ❌       |      ✅      | | 🇺🇬 Uganda   |     ✅       |      ✅      | | 🇬🇭 Ghana    |     ✅       |      ✅      | | 🇰🇪 Kenya    |     ✅       |      ✅      | 
        /// </summary>
        /// <exception cref="rafikigen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentAccountType">The payment account type to lookup for</param>
        /// <param name="accountNumber">The account number, that is either the mobile money number or bank account number</param>
        /// <param name="bankId">If payment_account_type is BANK_ACCOUNT, this will be a mandatory field representing the bank id (bnk-xxx) used to identify which bank the account number belongs to (optional)</param>
        /// <param name="varOperator">If payment_account_type is MOBILE_MONEY, this will be a mandatory field representing the mobile money operator (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupsAccountNumberGet200Response)</returns>
        public async System.Threading.Tasks.Task<rafikigen.Client.ApiResponse<LookupsAccountNumberGet200Response>> LookupsAccountNumberGetWithHttpInfoAsync(string paymentAccountType, string accountNumber, string? bankId = default(string?), string? varOperator = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymentAccountType' is set
            if (paymentAccountType == null)
            {
                throw new rafikigen.Client.ApiException(400, "Missing required parameter 'paymentAccountType' when calling LookupApi->LookupsAccountNumberGet");
            }

            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
            {
                throw new rafikigen.Client.ApiException(400, "Missing required parameter 'accountNumber' when calling LookupApi->LookupsAccountNumberGet");
            }


            rafikigen.Client.RequestOptions localVarRequestOptions = new rafikigen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rafikigen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rafikigen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountNumber", rafikigen.Client.ClientUtils.ParameterToString(accountNumber)); // path parameter
            localVarRequestOptions.QueryParameters.Add(rafikigen.Client.ClientUtils.ParameterToMultiMap("", "payment_account_type", paymentAccountType));
            if (bankId != null)
            {
                localVarRequestOptions.QueryParameters.Add(rafikigen.Client.ClientUtils.ParameterToMultiMap("", "bank_id", bankId));
            }
            if (varOperator != null)
            {
                localVarRequestOptions.QueryParameters.Add(rafikigen.Client.ClientUtils.ParameterToMultiMap("", "operator", varOperator));
            }

            localVarRequestOptions.Operation = "LookupApi.LookupsAccountNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LookupsAccountNumberGet200Response>("/lookups/{accountNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupsAccountNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
