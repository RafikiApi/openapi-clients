/*
 * Resources
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenapiPayoutCreateRequestSenderIndividualIdentityDocument {
    /// <span style=\"color:#e95f6a;\">required if identity_document is provided</span>  The ISO 3166 alpha-2 country code indicating the issuing country of the document.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// <span style=\"color:#e95f6a;\">required if identity_document is provided</span>  Date formatted as yyyy-mm-dd
    #[serde(rename = "expires_on", skip_serializing_if = "Option::is_none")]
    pub expires_on: Option<String>,
    /// Date formatted as yyyy-mm-dd
    #[serde(rename = "issued_on", skip_serializing_if = "Option::is_none")]
    pub issued_on: Option<String>,
    /// <span style=\"color:#e95f6a;\">required if identity_document is provided</span>
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    /// <span style=\"color:#e95f6a;\">required if identity_document is provided</span>  One of `PASSPORT`, `DRIVING_LICENCE`, `NATIONAL_ID_CARD`, `RESIDENCE_PERMIT`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl OpenapiPayoutCreateRequestSenderIndividualIdentityDocument {
    pub fn new() -> OpenapiPayoutCreateRequestSenderIndividualIdentityDocument {
        OpenapiPayoutCreateRequestSenderIndividualIdentityDocument {
            country: None,
            expires_on: None,
            issued_on: None,
            number: None,
            r#type: None,
        }
    }
}

/// <span style=\"color:#e95f6a;\">required if identity_document is provided</span>  One of `PASSPORT`, `DRIVING_LICENCE`, `NATIONAL_ID_CARD`, `RESIDENCE_PERMIT`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PASSPORT")]
    Passport,
    #[serde(rename = "DRIVING_LICENCE")]
    DrivingLicence,
    #[serde(rename = "NATIONAL_ID_CARD")]
    NationalIdCard,
    #[serde(rename = "RESIDENCE_PERMIT")]
    ResidencePermit,
}

impl Default for Type {
    fn default() -> Type {
        Self::Passport
    }
}

