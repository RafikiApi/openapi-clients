/*
 * Resources
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// OpenapiPayoutCreateRequestSender : An optional property for incorporating sender details. Please refer to the \"ðŸ’¡ **Compliance requirements**\" documentation above.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenapiPayoutCreateRequestSender {
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<crate::models::OpenapiPayoutCreateRequestSenderAddress>>,
    #[serde(rename = "individual", skip_serializing_if = "Option::is_none")]
    pub individual: Option<Box<crate::models::OpenapiPayoutCreateRequestSenderIndividual>>,
    /// <span style=\"color:#e95f6a;\">required if sender is provided</span>  The individual full name or registered business legal name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// <span style=\"color:#e95f6a;\">required if sender is provided</span>  Either `INDIVIDUAL` or `BUSINESS`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl OpenapiPayoutCreateRequestSender {
    /// An optional property for incorporating sender details. Please refer to the \"ðŸ’¡ **Compliance requirements**\" documentation above.
    pub fn new() -> OpenapiPayoutCreateRequestSender {
        OpenapiPayoutCreateRequestSender {
            address: None,
            individual: None,
            name: None,
            r#type: None,
        }
    }
}

/// <span style=\"color:#e95f6a;\">required if sender is provided</span>  Either `INDIVIDUAL` or `BUSINESS`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "INDIVIDUAL")]
    Individual,
    #[serde(rename = "BUSINESS")]
    Business,
}

impl Default for Type {
    fn default() -> Type {
        Self::Individual
    }
}

