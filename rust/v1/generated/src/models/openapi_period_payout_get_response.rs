/*
 * Resources
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenapiPeriodPayoutGetResponse {
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<Box<crate::models::OpenapiPayoutCreateResponseAmount>>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "custom_id", skip_serializing_if = "Option::is_none")]
    pub custom_id: Option<String>,
    /// The payout unique identifier
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The recipient payment account receiving funds
    #[serde(rename = "payment_account_id", skip_serializing_if = "Option::is_none")]
    pub payment_account_id: Option<String>,
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<Purpose>,
    /// The reference provided by the recipient account's actual bank or telco on a successful payout.  > ⚠️ > It's important to be aware that this information might not be accessible for every payout. If there's no way for us to obtain it, this property will be omitted entirely. Hence, we highly recommend implementing conditional checks to confirm the presence of this property.
    #[serde(rename = "receipt", skip_serializing_if = "Option::is_none")]
    pub receipt: Option<String>,
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<crate::models::OpenapiPayoutCreateResponseSender>>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<crate::models::OpenapiPayoutCreateResponseState>>,
    /// The wallet ID from which the money will disburse
    #[serde(rename = "wallet_id", skip_serializing_if = "Option::is_none")]
    pub wallet_id: Option<String>,
}

impl OpenapiPeriodPayoutGetResponse {
    pub fn new() -> OpenapiPeriodPayoutGetResponse {
        OpenapiPeriodPayoutGetResponse {
            amount: None,
            created_at: None,
            custom_id: None,
            id: None,
            payment_account_id: None,
            purpose: None,
            receipt: None,
            sender: None,
            state: None,
            wallet_id: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Purpose {
    #[serde(rename = "GOODS_PURCHASE")]
    GoodsPurchase,
    #[serde(rename = "SERVICES_PAYMENT")]
    ServicesPayment,
    #[serde(rename = "INVOICE_PAYMENT")]
    InvoicePayment,
    #[serde(rename = "LOAN_REPAYMENT")]
    LoanRepayment,
    #[serde(rename = "BILLS_PAYMENT")]
    BillsPayment,
    #[serde(rename = "SALARY_AND_WAGES")]
    SalaryAndWages,
    #[serde(rename = "P2P_TRANSFER")]
    P2PTransfer,
    #[serde(rename = "REMITTANCE")]
    Remittance,
    #[serde(rename = "DONATION")]
    Donation,
    #[serde(rename = "GRANTS_AND_SCHOLARSHIPS")]
    GrantsAndScholarships,
    #[serde(rename = "TRAVEL_AND_ACCOMMODATION")]
    TravelAndAccommodation,
    #[serde(rename = "TAX_PAYMENT")]
    TaxPayment,
    #[serde(rename = "INSURANCE_PREMIUM")]
    InsurancePremium,
}

impl Default for Purpose {
    fn default() -> Purpose {
        Self::GoodsPurchase
    }
}

